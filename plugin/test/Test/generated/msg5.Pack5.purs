-- | Generated by __protobuf__ from file `msg5.proto`
module Pack5.Msg5
( Msg1(..), Msg1Row, Msg1R, parseMsg1, putMsg1, defaultMsg1, mkMsg1, mergeMsg1, Msg1_Sum1(..)
, Msg2(..), Msg2Row, Msg2R, parseMsg2, putMsg2, defaultMsg2, mkMsg2, mergeMsg2, Msg2_Sum1(..)
, Msg1_E1(..)
)
where
import Protobuf.Internal.Prelude
import Protobuf.Internal.Prelude as Prelude




-- | Message generated by __protobuf__ from `pack5.Msg1`
newtype Msg1 = Msg1 Msg1R
type Msg1Row =
  ( sum1 :: Prelude.Maybe Msg1_Sum1
  , __unknown_fields :: Array Prelude.UnknownField
  )
type Msg1R = Record Msg1Row
derive instance genericMsg1 :: Prelude.Generic Msg1 _
derive instance newtypeMsg1 :: Prelude.Newtype Msg1 _
derive instance eqMsg1 :: Prelude.Eq Msg1
instance showMsg1 :: Prelude.Show Msg1 where show x = Prelude.genericShow x

putMsg1 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Msg1 -> Prelude.PutM m Prelude.Unit
putMsg1 (Msg1 r) = do
  case r.sum1 of
    Prelude.Nothing -> pure Prelude.unit
    Prelude.Just (Msg1_Sum1_F1 x) -> Prelude.putOptional 1 (Prelude.Just x) (\_ -> false) Prelude.encodeDoubleField
    Prelude.Just (Msg1_Sum1_F2 x) -> Prelude.putOptional 2 (Prelude.Just x) (\_ -> false) Prelude.encodeFloatField
    Prelude.Just (Msg1_Sum1_F3 x) -> Prelude.putOptional 3 (Prelude.Just x) (\_ -> false) Prelude.encodeInt32Field
    Prelude.Just (Msg1_Sum1_F4 x) -> Prelude.putOptional 4 (Prelude.Just x) (\_ -> false) Prelude.encodeInt64Field
    Prelude.Just (Msg1_Sum1_F5 x) -> Prelude.putOptional 5 (Prelude.Just x) (\_ -> false) Prelude.encodeUint32Field
    Prelude.Just (Msg1_Sum1_F6 x) -> Prelude.putOptional 6 (Prelude.Just x) (\_ -> false) Prelude.encodeUint64Field
    Prelude.Just (Msg1_Sum1_F7 x) -> Prelude.putOptional 7 (Prelude.Just x) (\_ -> false) Prelude.encodeSint32Field
    Prelude.Just (Msg1_Sum1_F8 x) -> Prelude.putOptional 8 (Prelude.Just x) (\_ -> false) Prelude.encodeSint64Field
    Prelude.Just (Msg1_Sum1_F9 x) -> Prelude.putOptional 9 (Prelude.Just x) (\_ -> false) Prelude.encodeFixed32Field
    Prelude.Just (Msg1_Sum1_F10 x) -> Prelude.putOptional 10 (Prelude.Just x) (\_ -> false) Prelude.encodeFixed64Field
    Prelude.Just (Msg1_Sum1_F11 x) -> Prelude.putOptional 11 (Prelude.Just x) (\_ -> false) Prelude.encodeSfixed64Field
    Prelude.Just (Msg1_Sum1_F12 x) -> Prelude.putOptional 12 (Prelude.Just x) (\_ -> false) Prelude.encodeBoolField
    Prelude.Just (Msg1_Sum1_F13 x) -> Prelude.putOptional 13 (Prelude.Just x) (\_ -> false) Prelude.encodeStringField
    Prelude.Just (Msg1_Sum1_F15 x) -> Prelude.putOptional 15 (Prelude.Just x) (\_ -> false) Prelude.putEnumField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseMsg1 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m Msg1
parseMsg1 length = Prelude.label "Msg1 / " $
  Prelude.parseMessage Msg1 defaultMsg1 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder Msg1R Msg1R)
  parseField 1 Prelude.Bits64 = Prelude.label "F1 / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F1 x)
  parseField 2 Prelude.Bits32 = Prelude.label "F2 / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F2 x)
  parseField 3 Prelude.VarInt = Prelude.label "F3 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F3 x)
  parseField 4 Prelude.VarInt = Prelude.label "F4 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F4 x)
  parseField 5 Prelude.VarInt = Prelude.label "F5 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F5 x)
  parseField 6 Prelude.VarInt = Prelude.label "F6 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F6 x)
  parseField 7 Prelude.VarInt = Prelude.label "F7 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F7 x)
  parseField 8 Prelude.VarInt = Prelude.label "F8 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F8 x)
  parseField 9 Prelude.Bits32 = Prelude.label "F9 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F9 x)
  parseField 10 Prelude.Bits64 = Prelude.label "F10 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ ->  Prelude.Just (Msg1_Sum1_F10 x)
  parseField 11 Prelude.Bits64 = Prelude.label "F11 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F11 x)
  parseField 12 Prelude.VarInt = Prelude.label "F12 / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F12 x)
  parseField 13 Prelude.LenDel = Prelude.label "F13 / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F13 x)
  parseField 15 Prelude.VarInt = Prelude.label "F15 / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg1_Sum1_F15 x)
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultMsg1 :: Msg1R
defaultMsg1 =
  { sum1: Prelude.Nothing
  , __unknown_fields: []
  }

mkMsg1 :: forall r1 r3. Prelude.Union r1 Msg1Row r3 => Prelude.Nub r3 Msg1Row => Record r1 -> Msg1
mkMsg1 r = Msg1 $ Prelude.merge r defaultMsg1
data Msg1_Sum1
  = Msg1_Sum1_F1 Number
  | Msg1_Sum1_F2 Prelude.Float32
  | Msg1_Sum1_F3 Int
  | Msg1_Sum1_F4 Prelude.Int64
  | Msg1_Sum1_F5 Prelude.UInt
  | Msg1_Sum1_F6 Prelude.UInt64
  | Msg1_Sum1_F7 Int
  | Msg1_Sum1_F8 Prelude.Int64
  | Msg1_Sum1_F9 Prelude.UInt
  | Msg1_Sum1_F10 Prelude.UInt64
  | Msg1_Sum1_F11 Prelude.Int64
  | Msg1_Sum1_F12 Boolean
  | Msg1_Sum1_F13 String
  | Msg1_Sum1_F15 Msg1_E1

derive instance genericMsg1_Sum1 :: Prelude.Generic Msg1_Sum1 _
derive instance eqMsg1_Sum1 :: Prelude.Eq Msg1_Sum1
instance showMsg1_Sum1 :: Prelude.Show Msg1_Sum1 where show = Prelude.genericShow

mergeMsg1_Sum1 :: Prelude.Maybe Msg1_Sum1 -> Prelude.Maybe Msg1_Sum1 -> Prelude.Maybe Msg1_Sum1
mergeMsg1_Sum1 l r = case Prelude.Tuple l r of
  _ -> Prelude.alt l r

mergeMsg1 :: Msg1 -> Msg1 -> Msg1
mergeMsg1 (Msg1 l) (Msg1 r) = Msg1
  { sum1: mergeMsg1_Sum1 l.sum1 r.sum1
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `pack5.msg2`
newtype Msg2 = Msg2 Msg2R
type Msg2Row =
  ( sum1 :: Prelude.Maybe Msg2_Sum1
  , __unknown_fields :: Array Prelude.UnknownField
  )
type Msg2R = Record Msg2Row
derive instance genericMsg2 :: Prelude.Generic Msg2 _
derive instance newtypeMsg2 :: Prelude.Newtype Msg2 _
derive instance eqMsg2 :: Prelude.Eq Msg2
instance showMsg2 :: Prelude.Show Msg2 where show x = Prelude.genericShow x

putMsg2 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Msg2 -> Prelude.PutM m Prelude.Unit
putMsg2 (Msg2 r) = do
  case r.sum1 of
    Prelude.Nothing -> pure Prelude.unit
    Prelude.Just (Msg2_Sum1_F1 x) -> Prelude.putOptional 1 (Prelude.Just x) (\_ -> false) $ Prelude.putLenDel putMsg1
    Prelude.Just (Msg2_Sum1_F2 x) -> Prelude.putOptional 2 (Prelude.Just x) (\_ -> false) Prelude.encodeStringField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseMsg2 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m Msg2
parseMsg2 length = Prelude.label "msg2 / " $
  Prelude.parseMessage Msg2 defaultMsg2 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder Msg2R Msg2R)
  parseField 1 Prelude.LenDel = Prelude.label "f1 / " $ do
    x <- Prelude.parseLenDel parseMsg1
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ mergeMsg2_Sum1 (Prelude.Just (Msg2_Sum1_F1 x))
  parseField 2 Prelude.LenDel = Prelude.label "f2 / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "sum1") $ \_ -> Prelude.Just (Msg2_Sum1_F2 x)
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultMsg2 :: Msg2R
defaultMsg2 =
  { sum1: Prelude.Nothing
  , __unknown_fields: []
  }

mkMsg2 :: forall r1 r3. Prelude.Union r1 Msg2Row r3 => Prelude.Nub r3 Msg2Row => Record r1 -> Msg2
mkMsg2 r = Msg2 $ Prelude.merge r defaultMsg2
data Msg2_Sum1
  = Msg2_Sum1_F1 Msg1
  | Msg2_Sum1_F2 String

derive instance genericMsg2_Sum1 :: Prelude.Generic Msg2_Sum1 _
derive instance eqMsg2_Sum1 :: Prelude.Eq Msg2_Sum1
instance showMsg2_Sum1 :: Prelude.Show Msg2_Sum1 where show = Prelude.genericShow

mergeMsg2_Sum1 :: Prelude.Maybe Msg2_Sum1 -> Prelude.Maybe Msg2_Sum1 -> Prelude.Maybe Msg2_Sum1
mergeMsg2_Sum1 l r = case Prelude.Tuple l r of
  Prelude.Tuple (Prelude.Just (Msg2_Sum1_F1 l')) (Prelude.Just (Msg2_Sum1_F1 r')) -> Prelude.map Msg2_Sum1_F1 $ Prelude.mergeWith mergeMsg1 (Prelude.Just l') (Prelude.Just r')
  _ -> Prelude.alt l r

mergeMsg2 :: Msg2 -> Msg2 -> Msg2
mergeMsg2 (Msg2 l) (Msg2 r) = Msg2
  { sum1: mergeMsg2_Sum1 l.sum1 r.sum1
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Enum generated by __protobuf__ from `pack5.Msg1.e1`
data Msg1_E1
  = Msg1_E1_One
  | Msg1_E1_Two
  | Msg1_E1_Three
derive instance genericMsg1_E1 :: Prelude.Generic Msg1_E1 _
derive instance eqMsg1_E1 :: Prelude.Eq Msg1_E1
instance showMsg1_E1 :: Prelude.Show Msg1_E1 where show = Prelude.genericShow
instance ordMsg1_E1 :: Prelude.Ord Msg1_E1 where compare = Prelude.genericCompare
instance boundedMsg1_E1 :: Prelude.Bounded Msg1_E1
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumMsg1_E1 :: Prelude.Enum Msg1_E1
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumMsg1_E1 :: Prelude.BoundedEnum Msg1_E1
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just Msg1_E1_One
  toEnum (2) = Prelude.Just Msg1_E1_Two
  toEnum (3) = Prelude.Just Msg1_E1_Three
  toEnum _ = Prelude.Nothing
  fromEnum Msg1_E1_One = (0)
  fromEnum Msg1_E1_Two = (2)
  fromEnum Msg1_E1_Three = (3)
instance defaultMsg1_E1 :: Prelude.Default Msg1_E1
 where
  default = Msg1_E1_One
  isDefault = eq Msg1_E1_One

