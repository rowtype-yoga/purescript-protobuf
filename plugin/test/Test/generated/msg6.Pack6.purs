-- | Generated by __protobuf__ from file `msg6.proto`
module Pack6.Msg6
( Msg6(..), Msg6Row, Msg6R, parseMsg6, putMsg6, defaultMsg6, mkMsg6, mergeMsg6
)
where
import Protobuf.Internal.Prelude
import Protobuf.Internal.Prelude as Prelude




-- | Message generated by __protobuf__ from `pack6.Msg6`
newtype Msg6 = Msg6 Msg6R
type Msg6Row =
  ( singular_int32 :: Prelude.Maybe Int
  , optional_int32 :: Prelude.Maybe Int
  , __unknown_fields :: Array Prelude.UnknownField
  )
type Msg6R = Record Msg6Row
derive instance genericMsg6 :: Prelude.Generic Msg6 _
derive instance newtypeMsg6 :: Prelude.Newtype Msg6 _
derive instance eqMsg6 :: Prelude.Eq Msg6
instance showMsg6 :: Prelude.Show Msg6 where show x = Prelude.genericShow x

putMsg6 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Msg6 -> Prelude.PutM m Prelude.Unit
putMsg6 (Msg6 r) = do
  Prelude.putOptional 1 r.singular_int32 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.optional_int32 (\_ -> false) Prelude.encodeInt32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseMsg6 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m Msg6
parseMsg6 length = Prelude.label "Msg6 / " $
  Prelude.parseMessage Msg6 defaultMsg6 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder Msg6R Msg6R)
  parseField 1 Prelude.VarInt = Prelude.label "singular_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "singular_int32") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "optional_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_int32") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultMsg6 :: Msg6R
defaultMsg6 =
  { singular_int32: Prelude.Nothing
  , optional_int32: Prelude.Nothing
  , __unknown_fields: []
  }

mkMsg6 :: forall r1 r3. Prelude.Union r1 Msg6Row r3 => Prelude.Nub r3 Msg6Row => Record r1 -> Msg6
mkMsg6 r = Msg6 $ Prelude.merge r defaultMsg6

mergeMsg6 :: Msg6 -> Msg6 -> Msg6
mergeMsg6 (Msg6 l) (Msg6 r) = Msg6
  { singular_int32: Prelude.alt l.singular_int32 r.singular_int32
  , optional_int32: Prelude.alt l.optional_int32 r.optional_int32
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


