-- | Generated by __protobuf__ from file `msg2.proto`
module Pack.Msg2
( Msg2(..), Msg2Row, Msg2R, parseMsg2, putMsg2, defaultMsg2, mkMsg2, mergeMsg2
, Msg2_E1(..)
)
where
import Protobuf.Internal.Prelude
import Protobuf.Internal.Prelude as Prelude




-- | Message generated by __protobuf__ from `pack.msg2`
newtype Msg2 = Msg2 Msg2R
type Msg2Row =
  ( f1 :: Array Number
  , f2 :: Array Prelude.Float32
  , f3 :: Array Int
  , f4 :: Array Prelude.Int64
  , f5 :: Array Prelude.UInt
  , f6 :: Array Prelude.UInt64
  , f7 :: Array Int
  , f8 :: Array Prelude.Int64
  , f9 :: Array Prelude.UInt
  , f10 :: Array Prelude.UInt64
  , f11 :: Array Prelude.Int64
  , f12 :: Array Boolean
  , f13 :: Array String
  , f14 :: Array Prelude.Bytes
  , f15 :: Array Msg2_E1
  , __unknown_fields :: Array Prelude.UnknownField
  )
type Msg2R = Record Msg2Row
derive instance genericMsg2 :: Prelude.Generic Msg2 _
derive instance newtypeMsg2 :: Prelude.Newtype Msg2 _
derive instance eqMsg2 :: Prelude.Eq Msg2
instance showMsg2 :: Prelude.Show Msg2 where show x = Prelude.genericShow x

putMsg2 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Msg2 -> Prelude.PutM m Prelude.Unit
putMsg2 (Msg2 r) = do
  Prelude.putPacked 1 r.f1 Prelude.encodeDouble
  Prelude.putPacked 2 r.f2 Prelude.encodeFloat
  Prelude.putPacked 3 r.f3 Prelude.encodeInt32
  Prelude.putPacked 4 r.f4 Prelude.encodeInt64
  Prelude.putPacked 5 r.f5 Prelude.encodeUint32
  Prelude.putPacked 6 r.f6 Prelude.encodeUint64
  Prelude.putPacked 7 r.f7 Prelude.encodeSint32
  Prelude.putPacked 8 r.f8 Prelude.encodeSint64
  Prelude.putPacked 9 r.f9 Prelude.encodeFixed32
  Prelude.putPacked 10 r.f10 Prelude.encodeFixed64
  Prelude.putPacked 11 r.f11 Prelude.encodeSfixed64
  Prelude.putPacked 12 r.f12 Prelude.encodeBool
  Prelude.putRepeated 13 r.f13 Prelude.encodeStringField
  Prelude.putRepeated 14 r.f14 $ Prelude.encodeBytesField
  Prelude.putPacked 15 r.f15 Prelude.putEnum
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseMsg2 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m Msg2
parseMsg2 length = Prelude.label "msg2 / " $
  Prelude.parseMessage Msg2 defaultMsg2 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder Msg2R Msg2R)
  parseField 1 Prelude.Bits64 = Prelude.label "f1 / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f1") $ Prelude.flip Prelude.snoc x
  parseField 1 Prelude.LenDel = Prelude.label "f1 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeDoubleArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f1") $ Prelude.flip Prelude.append x
  parseField 2 Prelude.Bits32 = Prelude.label "f2 / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f2") $ Prelude.flip Prelude.snoc x
  parseField 2 Prelude.LenDel = Prelude.label "f2 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFloatArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f2") $ Prelude.flip Prelude.append x
  parseField 3 Prelude.VarInt = Prelude.label "f3 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f3") $ Prelude.flip Prelude.snoc x
  parseField 3 Prelude.LenDel = Prelude.label "f3 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f3") $ Prelude.flip Prelude.append x
  parseField 4 Prelude.VarInt = Prelude.label "f4 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f4") $ Prelude.flip Prelude.snoc x
  parseField 4 Prelude.LenDel = Prelude.label "f4 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f4") $ Prelude.flip Prelude.append x
  parseField 5 Prelude.VarInt = Prelude.label "f5 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f5") $ Prelude.flip Prelude.snoc x
  parseField 5 Prelude.LenDel = Prelude.label "f5 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f5") $ Prelude.flip Prelude.append x
  parseField 6 Prelude.VarInt = Prelude.label "f6 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f6") $ Prelude.flip Prelude.snoc x
  parseField 6 Prelude.LenDel = Prelude.label "f6 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f6") $ Prelude.flip Prelude.append x
  parseField 7 Prelude.VarInt = Prelude.label "f7 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f7") $ Prelude.flip Prelude.snoc x
  parseField 7 Prelude.LenDel = Prelude.label "f7 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f7") $ Prelude.flip Prelude.append x
  parseField 8 Prelude.VarInt = Prelude.label "f8 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f8") $ Prelude.flip Prelude.snoc x
  parseField 8 Prelude.LenDel = Prelude.label "f8 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f8") $ Prelude.flip Prelude.append x
  parseField 9 Prelude.Bits32 = Prelude.label "f9 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f9") $ Prelude.flip Prelude.snoc x
  parseField 9 Prelude.LenDel = Prelude.label "f9 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f9") $ Prelude.flip Prelude.append x
  parseField 10 Prelude.Bits64 = Prelude.label "f10 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f10") $ Prelude.flip Prelude.snoc x
  parseField 10 Prelude.LenDel = Prelude.label "f10 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f10") $ Prelude.flip Prelude.append x
  parseField 11 Prelude.Bits64 = Prelude.label "f11 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f11") $ Prelude.flip Prelude.snoc x
  parseField 11 Prelude.LenDel = Prelude.label "f11 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f11") $ Prelude.flip Prelude.append x
  parseField 12 Prelude.VarInt = Prelude.label "f12 / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f12") $ Prelude.flip Prelude.snoc x
  parseField 12 Prelude.LenDel = Prelude.label "f12 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f12") $ Prelude.flip Prelude.append x
  parseField 13 Prelude.LenDel = Prelude.label "f13 / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f13") $ Prelude.flip Prelude.snoc x
  parseField 14 Prelude.LenDel = Prelude.label "f14 / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f14") $ Prelude.flip Prelude.snoc x
  parseField 15 Prelude.VarInt = Prelude.label "f15 / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f15") $ Prelude.flip Prelude.snoc x
  parseField 15 Prelude.LenDel = Prelude.label "f15 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f15") $ Prelude.flip Prelude.append x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultMsg2 :: Msg2R
defaultMsg2 =
  { f1: []
  , f2: []
  , f3: []
  , f4: []
  , f5: []
  , f6: []
  , f7: []
  , f8: []
  , f9: []
  , f10: []
  , f11: []
  , f12: []
  , f13: []
  , f14: []
  , f15: []
  , __unknown_fields: []
  }

mkMsg2 :: forall r1 r3. Prelude.Union r1 Msg2Row r3 => Prelude.Nub r3 Msg2Row => Record r1 -> Msg2
mkMsg2 r = Msg2 $ Prelude.merge r defaultMsg2

mergeMsg2 :: Msg2 -> Msg2 -> Msg2
mergeMsg2 (Msg2 l) (Msg2 r) = Msg2
  { f1: r.f1 <> l.f1
  , f2: r.f2 <> l.f2
  , f3: r.f3 <> l.f3
  , f4: r.f4 <> l.f4
  , f5: r.f5 <> l.f5
  , f6: r.f6 <> l.f6
  , f7: r.f7 <> l.f7
  , f8: r.f8 <> l.f8
  , f9: r.f9 <> l.f9
  , f10: r.f10 <> l.f10
  , f11: r.f11 <> l.f11
  , f12: r.f12 <> l.f12
  , f13: r.f13 <> l.f13
  , f14: r.f14 <> l.f14
  , f15: r.f15 <> l.f15
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Enum generated by __protobuf__ from `pack.msg2.e1`
data Msg2_E1
  = Msg2_E1_One
  | Msg2_E1_Two
  | Msg2_E1_Three
derive instance genericMsg2_E1 :: Prelude.Generic Msg2_E1 _
derive instance eqMsg2_E1 :: Prelude.Eq Msg2_E1
instance showMsg2_E1 :: Prelude.Show Msg2_E1 where show = Prelude.genericShow
instance ordMsg2_E1 :: Prelude.Ord Msg2_E1 where compare = Prelude.genericCompare
instance boundedMsg2_E1 :: Prelude.Bounded Msg2_E1
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumMsg2_E1 :: Prelude.Enum Msg2_E1
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumMsg2_E1 :: Prelude.BoundedEnum Msg2_E1
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just Msg2_E1_One
  toEnum (2) = Prelude.Just Msg2_E1_Two
  toEnum (3) = Prelude.Just Msg2_E1_Three
  toEnum _ = Prelude.Nothing
  fromEnum Msg2_E1_One = (0)
  fromEnum Msg2_E1_Two = (2)
  fromEnum Msg2_E1_Three = (3)
instance defaultMsg2_E1 :: Prelude.Default Msg2_E1
 where
  default = Msg2_E1_One
  isDefault = eq Msg2_E1_One

