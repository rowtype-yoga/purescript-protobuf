-- | Generated by __protobuf__ from file `msg1.proto`
module Pack.Msg1
( Msg1(..), Msg1Row, Msg1R, parseMsg1, putMsg1, defaultMsg1, mkMsg1, mergeMsg1
, Msg1_E1(..)
)
where
import Protobuf.Internal.Prelude
import Protobuf.Internal.Prelude as Prelude




-- | Message generated by __protobuf__ from `pack.msg1`
newtype Msg1 = Msg1 Msg1R
type Msg1Row =
  ( f1 :: Prelude.Maybe Number
  , f2 :: Prelude.Maybe Prelude.Float32
  , f3 :: Prelude.Maybe Int
  , f4 :: Prelude.Maybe Prelude.Int64
  , f5 :: Prelude.Maybe Prelude.UInt
  , f6 :: Prelude.Maybe Prelude.UInt64
  , f7 :: Prelude.Maybe Int
  , f8 :: Prelude.Maybe Prelude.Int64
  , f9 :: Prelude.Maybe Prelude.UInt
  , f10 :: Prelude.Maybe Prelude.UInt64
  , f11 :: Prelude.Maybe Prelude.Int64
  , f12 :: Prelude.Maybe Boolean
  , f13 :: Prelude.Maybe String
  , f14 :: Prelude.Maybe Prelude.Bytes
  , f15 :: Prelude.Maybe Msg1_E1
  , __unknown_fields :: Array Prelude.UnknownField
  )
type Msg1R = Record Msg1Row
derive instance genericMsg1 :: Prelude.Generic Msg1 _
derive instance newtypeMsg1 :: Prelude.Newtype Msg1 _
derive instance eqMsg1 :: Prelude.Eq Msg1
instance showMsg1 :: Prelude.Show Msg1 where show x = Prelude.genericShow x

putMsg1 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Msg1 -> Prelude.PutM m Prelude.Unit
putMsg1 (Msg1 r) = do
  Prelude.putOptional 1 r.f1 Prelude.isDefault Prelude.encodeDoubleField
  Prelude.putOptional 2 r.f2 Prelude.isDefault Prelude.encodeFloatField
  Prelude.putOptional 3 r.f3 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 4 r.f4 Prelude.isDefault Prelude.encodeInt64Field
  Prelude.putOptional 5 r.f5 Prelude.isDefault Prelude.encodeUint32Field
  Prelude.putOptional 6 r.f6 Prelude.isDefault Prelude.encodeUint64Field
  Prelude.putOptional 7 r.f7 Prelude.isDefault Prelude.encodeSint32Field
  Prelude.putOptional 8 r.f8 Prelude.isDefault Prelude.encodeSint64Field
  Prelude.putOptional 9 r.f9 Prelude.isDefault Prelude.encodeFixed32Field
  Prelude.putOptional 10 r.f10 Prelude.isDefault Prelude.encodeFixed64Field
  Prelude.putOptional 11 r.f11 Prelude.isDefault Prelude.encodeSfixed64Field
  Prelude.putOptional 12 r.f12 Prelude.isDefault Prelude.encodeBoolField
  Prelude.putOptional 13 r.f13 Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 14 r.f14 Prelude.isDefault Prelude.encodeBytesField
  Prelude.putOptional 15 r.f15 Prelude.isDefault Prelude.putEnumField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseMsg1 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m Msg1
parseMsg1 length = Prelude.label "msg1 / " $
  Prelude.parseMessage Msg1 defaultMsg1 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder Msg1R Msg1R)
  parseField 1 Prelude.Bits64 = Prelude.label "F1 / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f1") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits32 = Prelude.label "F2 / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f2") $ \_ -> Prelude.Just x
  parseField 3 Prelude.VarInt = Prelude.label "F3 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f3") $ \_ -> Prelude.Just x
  parseField 4 Prelude.VarInt = Prelude.label "F4 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f4") $ \_ -> Prelude.Just x
  parseField 5 Prelude.VarInt = Prelude.label "F5 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f5") $ \_ -> Prelude.Just x
  parseField 6 Prelude.VarInt = Prelude.label "F6 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f6") $ \_ -> Prelude.Just x
  parseField 7 Prelude.VarInt = Prelude.label "F7 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f7") $ \_ -> Prelude.Just x
  parseField 8 Prelude.VarInt = Prelude.label "F8 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f8") $ \_ -> Prelude.Just x
  parseField 9 Prelude.Bits32 = Prelude.label "F9 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f9") $ \_ -> Prelude.Just x
  parseField 10 Prelude.Bits64 = Prelude.label "F10 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f10") $ \_ -> Prelude.Just x
  parseField 11 Prelude.Bits64 = Prelude.label "F11 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f11") $ \_ -> Prelude.Just x
  parseField 12 Prelude.VarInt = Prelude.label "F12 / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f12") $ \_ -> Prelude.Just x
  parseField 13 Prelude.LenDel = Prelude.label "F13 / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f13") $ \_ -> Prelude.Just x
  parseField 14 Prelude.LenDel = Prelude.label "f14 / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f14") $ \_ -> Prelude.Just x
  parseField 15 Prelude.VarInt = Prelude.label "F15 / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "f15") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultMsg1 :: Msg1R
defaultMsg1 =
  { f1: Prelude.Nothing
  , f2: Prelude.Nothing
  , f3: Prelude.Nothing
  , f4: Prelude.Nothing
  , f5: Prelude.Nothing
  , f6: Prelude.Nothing
  , f7: Prelude.Nothing
  , f8: Prelude.Nothing
  , f9: Prelude.Nothing
  , f10: Prelude.Nothing
  , f11: Prelude.Nothing
  , f12: Prelude.Nothing
  , f13: Prelude.Nothing
  , f14: Prelude.Nothing
  , f15: Prelude.Nothing
  , __unknown_fields: []
  }

mkMsg1 :: forall r1 r3. Prelude.Union r1 Msg1Row r3 => Prelude.Nub r3 Msg1Row => Record r1 -> Msg1
mkMsg1 r = Msg1 $ Prelude.merge r defaultMsg1

mergeMsg1 :: Msg1 -> Msg1 -> Msg1
mergeMsg1 (Msg1 l) (Msg1 r) = Msg1
  { f1: Prelude.alt l.f1 r.f1
  , f2: Prelude.alt l.f2 r.f2
  , f3: Prelude.alt l.f3 r.f3
  , f4: Prelude.alt l.f4 r.f4
  , f5: Prelude.alt l.f5 r.f5
  , f6: Prelude.alt l.f6 r.f6
  , f7: Prelude.alt l.f7 r.f7
  , f8: Prelude.alt l.f8 r.f8
  , f9: Prelude.alt l.f9 r.f9
  , f10: Prelude.alt l.f10 r.f10
  , f11: Prelude.alt l.f11 r.f11
  , f12: Prelude.alt l.f12 r.f12
  , f13: Prelude.alt l.f13 r.f13
  , f14: Prelude.alt l.f14 r.f14
  , f15: Prelude.alt l.f15 r.f15
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Enum generated by __protobuf__ from `pack.msg1.e1`
data Msg1_E1
  = Msg1_E1_One
  | Msg1_E1_Two
  | Msg1_E1_Three
derive instance genericMsg1_E1 :: Prelude.Generic Msg1_E1 _
derive instance eqMsg1_E1 :: Prelude.Eq Msg1_E1
instance showMsg1_E1 :: Prelude.Show Msg1_E1 where show = Prelude.genericShow
instance ordMsg1_E1 :: Prelude.Ord Msg1_E1 where compare = Prelude.genericCompare
instance boundedMsg1_E1 :: Prelude.Bounded Msg1_E1
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumMsg1_E1 :: Prelude.Enum Msg1_E1
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumMsg1_E1 :: Prelude.BoundedEnum Msg1_E1
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just Msg1_E1_One
  toEnum (2) = Prelude.Just Msg1_E1_Two
  toEnum (3) = Prelude.Just Msg1_E1_Three
  toEnum _ = Prelude.Nothing
  fromEnum Msg1_E1_One = (0)
  fromEnum Msg1_E1_Two = (2)
  fromEnum Msg1_E1_Three = (3)
instance defaultMsg1_E1 :: Prelude.Default Msg1_E1
 where
  default = Msg1_E1_One
  isDefault = eq Msg1_E1_One

